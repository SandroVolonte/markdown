{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","MarkdownPreviewer","props","state","input","editorSize","previewSize","output","handleChange","bind","handleClickEdit","handleClickPrev","event","this","setState","target","value","Object","assign","className","icon","faFreeCodeCamp","size","onClick","faExpandArrowsAlt","id","onChange","React","Component","PreviewTranslator","rawMarkup","marked_1","sanitize","breaks","gfm","__html","dangerouslySetInnerHTML","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8ECiEAC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MA3ES,4qCA4ETC,YAAY,EACZC,aAAa,EACbC,OAAQ,IAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBAVR,E,yDAaNG,GACTC,KAAKC,SAAS,CACVV,MAAOQ,EAAMG,OAAOC,U,wCAKxBH,KAAKC,UAAS,SAAAX,GACV,OAAyB,IAArBA,EAAME,WACCY,OAAOC,OAAO,GAAIf,EAAO,CAACE,YAAY,IAE1CY,OAAOC,OAAO,GAAIf,EAAO,CAACE,YAAY,S,wCAKjDQ,KAAKC,UAAS,SAAAX,GACV,OAA0B,IAAtBA,EAAMG,YACCW,OAAOC,OAAO,GAAIf,EAAO,CAACG,aAAa,IAE3CW,OAAOC,OAAO,GAAIf,EAAO,CAACG,aAAa,S,+BAQlD,OACI,yBAAKa,UAAW,QACZ,yBAAKA,UAAW,OACZ,yBAAKA,UAAW,gBACZ,yBAAKA,UAAW,iBACZ,kBAAC,IAAD,CAAiBA,UAAW,UAAWC,KAAMC,IAAgBC,KAAM,OACnE,yBACIH,UAAW,SADf,WAGA,4BAAQA,UAAW,6BAA8BI,QAASV,KAAKH,iBAC3D,kBAAC,IAAD,CACIU,KAAMI,QAElB,8BAAUC,GAAI,SAAUN,UAAW,aAAcH,MAAOH,KAAKV,MAAMC,MACzDsB,SAAUb,KAAKL,iBAGjC,yBAAKW,UAAW,mBACZ,yBAAKA,UAAW,iBACZ,kBAAC,IAAD,CAAiBA,UAAW,UAAWC,KAAMC,IAAgBC,KAAM,OACnE,yBAAKH,UAAW,SAAhB,cACA,4BAAQA,UAAW,8BAA+BI,QAASV,KAAKF,iBAC5D,kBAAC,IAAD,CAAiBS,KAAMI,QAG3B,kBAAC,EAAD,CAAmBpB,MAAOS,KAAKV,MAAMC,c,GAnE7BuB,IAAMC,WA6EhCC,E,kDACF,WAAY3B,GAAO,IAAD,8BACd,cAAMA,IACD4B,UAAY,EAAKA,UAAUrB,KAAf,gBAFH,E,wDAKd,IAAIqB,EAAYC,YAASlB,KAAKX,MAAME,MAAO,CAAC4B,UAAW,EAAMC,QAAQ,EAAMC,KAAK,IAChF,MAAO,CAACC,OAAQL,K,+BAKhB,OACQ,0BAAML,GAAI,UAAWW,wBAAyBvB,KAAKiB,kB,GAbnCH,IAAMC,WCnJtCS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SFkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c73828e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n/**\r\nimport logo from \"./logo.svg\" ;\r\n **/\r\n\r\nimport \"./App.css\";\r\nimport { faFreeCodeCamp} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faExpandArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faCompressArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport marked_1 from \"marked/lib/marked.esm\";\r\n\r\nconst DEFAULTINPUT = \"# Welcome to my React Markdown Previewer!\\n\" +\r\n    \"\\n\" +\r\n    \"## This is a sub-heading...\\n\" +\r\n    \"### And here's some other cool stuff:\\n\" +\r\n    \"  \\n\" +\r\n    \"Heres some code, `<div></div>`, between 2 backticks.\\n\" +\r\n    \"\\n\" +\r\n    \"```\\n\" +\r\n    \"// this is multi-line code:\\n\" +\r\n    \"\\n\" +\r\n    \"function anotherExample(firstLine, lastLine) {\\n\" +\r\n    \"  if (firstLine == '```' && lastLine == '```') {\\n\" +\r\n    \"    return multiLineCode;\\n\" +\r\n    \"  }\\n\" +\r\n    \"}\\n\" +\r\n    \"```\\n\" +\r\n    \"  \\n\" +\r\n    \"You can also make text **bold**... whoa!\\n\" +\r\n    \"Or _italic_.\\n\" +\r\n    \"Or... wait for it... **_both!_**\\n\" +\r\n    \"And feel free to go crazy ~~crossing stuff out~~.\\n\" +\r\n    \"\\n\" +\r\n    \"There's also [links](https://www.freecodecamp.com), and\\n\" +\r\n    \"> Block Quotes!\\n\" +\r\n    \"\\n\" +\r\n    \"And if you want to get really crazy, even tables:\\n\" +\r\n    \"\\n\" +\r\n    \"Wild Header | Crazy Header | Another Header?\\n\" +\r\n    \"------------ | ------------- | ------------- \\n\" +\r\n    \"Your content can | be here, and it | can be here....\\n\" +\r\n    \"And here. | Okay. | I think we get it.\\n\" +\r\n    \"\\n\" +\r\n    \"- And of course there are lists.\\n\" +\r\n    \"  - Some are bulleted.\\n\" +\r\n    \"     - With different indentation levels.\\n\" +\r\n    \"        - That look like this.\\n\" +\r\n    \"\\n\" +\r\n    \"\\n\" +\r\n    \"1. And there are numbererd lists too.\\n\" +\r\n    \"1. Use just 1s if you want! \\n\" +\r\n    \"1. But the list goes on...\\n\" +\r\n    \"- Even if you use dashes or asterisks.\\n\" +\r\n    \"* And last but not least, let's not forget embedded images:\\n\" +\r\n    \"\\n\" +\r\n    \"![React Logo w/ Text](https://goo.gl/Umyytc)\";\r\n/**\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n **/\r\n\r\n\r\nclass MarkdownPreviewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: DEFAULTINPUT,\r\n            editorSize: true,\r\n            previewSize: true,\r\n            output: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClickEdit = this.handleClickEdit.bind(this);\r\n        this.handleClickPrev = this.handleClickPrev.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            input: event.target.value\r\n        });\r\n    }\r\n\r\n    handleClickEdit() {\r\n        this.setState(state => {\r\n            if (state.editorSize === true) {\r\n                return Object.assign({}, state, {editorSize: false});\r\n            }\r\n            return Object.assign({}, state, {editorSize: true});\r\n        });\r\n    }\r\n\r\n    handleClickPrev() {\r\n        this.setState(state => {\r\n            if (state.previewSize === true) {\r\n                return Object.assign({}, state, {previewSize: false});\r\n            }\r\n            return Object.assign({}, state, {previewSize: true});\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className={\"both\"}>\r\n                <div className={\"row\"}>\r\n                    <div className={\"col-6 editor\"}>\r\n                        <div className={\"wrapperheader\"}>\r\n                            <FontAwesomeIcon className={\"fccSymb\"} icon={faFreeCodeCamp} size={\"lg\"}/>\r\n                            <div\r\n                                className={\"title\"}> Editor\r\n                            </div>\r\n                            <button className={\"expandEditor windowsizebtn\"} onClick={this.handleClickEdit}>\r\n                                <FontAwesomeIcon\r\n                                    icon={faExpandArrowsAlt}/></button>\r\n                        </div>\r\n                        <textarea id={\"editor\"} className={\"inputfield\"} value={this.state.input}\r\n                                  onChange={this.handleChange}/>\r\n                    </div>\r\n                </div>\r\n                <div className={\"col-6 previewer\"}>\r\n                    <div className={\"wrapperheader\"}>\r\n                        <FontAwesomeIcon className={\"fccSymb\"} icon={faFreeCodeCamp} size={\"lg\"}/>\r\n                        <div className={\"title\"}> Previewer</div>\r\n                        <button className={\"extendPreview windowsizebtn\"} onClick={this.handleClickPrev}>\r\n                            <FontAwesomeIcon icon={faExpandArrowsAlt}/></button>\r\n                    </div>\r\n\r\n                        <PreviewTranslator input={this.state.input}/>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nclass PreviewTranslator extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.rawMarkup = this.rawMarkup.bind(this);\r\n    };\r\n    rawMarkup(){\r\n        let rawMarkup = marked_1(this.props.input, {sanitize : true, breaks: true, gfm: true});\r\n        return {__html: rawMarkup} ;\r\n    };\r\n\r\n    render(){\r\n\r\n        return(\r\n                <span id={\"preview\"} dangerouslySetInnerHTML={this.rawMarkup()}/>\r\n        )\r\n    };\r\n}\r\n\r\n\r\n\r\n//<PreviewTranslator input={this.state.input}/>\r\n\r\n\r\n\r\nexport {\r\n  MarkdownPreviewer,\r\n    PreviewTranslator\r\n};\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n//import App from \"./App\";\r\n//import \"./logo.svg\";\r\n\r\nimport{MarkdownPreviewer, } from \"./App\";\r\n//<MarkdownPreviewer />\r\n//<App/>\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <MarkdownPreviewer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}